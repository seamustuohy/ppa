<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc ipr="trust200902" category="info" docName="draft-trammell-perpass-ppa-01.txt">
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>

<front>
  <title abbrev="Pervasive Passive Adversary">
    The Pervasive Passive Adversary: Guidelines for the Evaluation of Protocols under Passive Surveillance
  </title>
  <author initials="B." surname="Trammell" fullname="Brian Trammell">
    <organization abbrev="ETH Zurich">
    Swiss Federal Institute of Technology Zurich
    </organization>
    <address>
      <postal>
        <street>Gloriastrasse 35</street>
        <city>8092 Zurich</city>
        <country>Switzerland</country>
      </postal>
      <phone>+41 44 632 70 13</phone>
      <email>trammell@tik.ee.ethz.ch</email>
    </address>
  </author>
  <author initials="D." surname="Borkmann" fullname="Daniel Borkmann">
    <organization abbrev="Red Hat">
    Red Hat
    </organization>
    <address>
      <postal>
        <street>Seefeldstrasse 69</street>
        <city>8008 Zurich</city>
        <country>Switzerland</country>
      </postal>
      <email>dborkman@redhat.com</email>
    </address>
  </author>

  <date year="2013" month="September" day="13"/>
  <area>Security</area>
  <workgroup>perpass non-WG</workgroup>
  <abstract>

    <t>This document elaborates a threat model for the Pervasive Passive
    Adversary (PPA): an adversary with an interest in indiscriminate
    eavesdropping that can passively observe network traffic at every layer at
    every point in the network between the endpoints. It is intended to
    demonstrate to protocol designers and implementors the observability and
    inferability of information and metainformation transported over their
    respective protocols, to assist in the evaluation of the performance of
    these protocols and the effectiveness of their protection mechanisms under
    pervasive passive surveillance.</t>

  </abstract>
</front>

<middle>
  
  <section title="Open Issues">
      <t><list style="numbers">

          <t>Lots of things need citations that don't have them yet.</t>
          
          <t>Threat analysis and protocol design guidelines need to be
          completed, which will require them to be started too.</t>
          
      </list></t>
  </section>
  
  <section title="Introduction">
    
    <t>Surveillance is defined in <xref target="RFC6973"/>, Section 5.1.1, as
    "the observation or monitoring of an individual's communications or
    activities". Pervasive passive surveillance is the practice of surveillance
    at widespread observation points, without any modification of network
    traffic, and without any particular surveillance target in mind. Pervasive
    passive surveillance allows subsequent analysis and inference to be applied
    to the collected data to achieve surveillance aims on a target to be
    identified later, or to analyze general communications patterns and/or
    behaviors without a specified target individual or group.</t>
    
    <t>This differentiates privacy in the face of pervasive surveillance from
    privacy as addressed in the literature, in that threats to privacy are
    generally (as in <xref target="RFC6973"/>) taken to have as a specific goal
    revealing the identity and/or associations of a specified individual;
    defeating pervasive surveillance of a large population is therefore more
    difficult than protecting the privacy of a single individual within a
    larger population.</t>
    
    <t>In this document, we assume a priori that communications systems should
    aim to provide appropriate privacy guarantees to their users, and that such
    pervasive surveillance is therefore a bad thing. Susceptibility
    to pervasive surveillance should avoided as a design goal in protocol
    design. From these assumptions we take the very act of pervasive
    surveillance to be adversarial by definition.</t>
    
    <t>This document outlines a threat model for an entity performing pervasive
    passive surveillance, termed the Pervasive Passive Adversary (PPA), and
    explores how to apply this model to the evaluation of protocols. As the
    primary threat posed by pervasive surveillance is a threat to the privacy
    of the parties to a given communication, this document is heavily based on
    <xref target="RFC6973"/>.</t>
    
  </section>
  
  <section title="Terminology">
      
      <t>The terms Anonymity, Anonymity Set, Anonymous, Attacker, Eavesdropper,
      Fingerprint, Fingerprinting, Identifier, Identity, Individual, Initiator,
      Intermediary, Observer, Pseudonym, Pseudonymity, Pseudonymous, Recipient,
      and Traffic Analysis are used in this document as defined by Section 3,
      Terminology, of <xref target="RFC6973"/>. In addition, this document
      defines the following terms:
      
      <list style="hanging"> 
          
          <t hangText="Observation: ">Information collected directly from
          communications by an eavesdropper or observer. For example, the
          knowledge that &lt;alice@example.com&gt; sent a message to
          &lt;bob@example.com&gt; via SMTP taken from the headers of an
          observed SMTP message would be an observation.</t>
          
          <t hangText="Inference: ">Information extracted from analysis of
          information collected directly from communications by an eavesdropper
          or observer. For example, the knowledge that a given web page was
          accessed by a given IP address, by comparing the size in octets of
          measured network flow records to fingerprints derived from known
          sizes of linked resources on the web servers involved would be an
          inference.</t>


      </list></t>

  </section>
  
  <section title="The Pervasive Passive Adversary">
    
      <t>The pervasive passive adversary (PPA) is an indiscriminate
      eavesdropper that can potentially observe every packet of all
      communications at any or every hop in a network path between the
      outward-facing network interface of the last trusted machine in the
      initiator's administrative domain and the recipient, and can potentially
      observe data at rest in intermediate systems outside the administrative
      domains of the initiator and recipient, but can take no other action with
      respect to these communications. Limiting the adversary to being
      completely passive may under-represent the threat to communications
      privacy posed especially by well-resourced adversaries, but represents
      well the maximum capability of a single entity whose surveillance is
      completely undetectable without physically securing the entire network
      path. We also assume that the PPA does not have unlimited resources,
      i.e., that it will attempt to eavesdrop at the most efficient observation
      point available to it, and will collect as little raw data as necessary
      to support its aims.</t>

      <t>We explicitly assume the PPA does not have the ability to observe
      communications on trusted systems at either the initiator or a recipient
      of a communication. Indeed, if the adversary is cooperating with or has
      compromised one of the communications endpoints, there is no guidance to
      give to protocol designers that would improve the privacy and security of
      the individual at the other endpoint: the compromise is then truly out of
      the scope of the communication enabled by the protocol.</t>
          
      <t>We further assume the PPA does not have privileged information
      allowing the reversal of strong encryption, e.g. compromised key material
      or knowledge of weaknesses in the design or implementation of
      cryptographic algorithms at the initiator, recipient, and/or
      intermediaries. While these risks do exist in the real world, these are
      separate from the protocol-level threats we consider here. We therefore
      presume that a given cryptographic protection for a protocol works as
      advertised, and declare the evaluation of cryptographic protections to be
      the subject of another work.</t>
      
      <t>The techniques available to the PPA are direct observation and
      inference. Direct observation involves taking information directly from
      eavesdropped communications - e.g., URLs identifying content or email
      addresses identifying individuals from application-layer headers.
      Inference, on the other involves analyzing eavesdropped information to
      derive new information from it; e.g., searching for application or
      behavioral fingerprints in observed traffic to derive information about
      the observed individual from them, in absence of directly-observed
      sources of the same information.</t>
      
      <t>[EDITOR'S NOTE: note similarity to the GPA.]</t>

  </section>
  
  <section title="Threat analysis">
      
      <t>On initial examination, the PPA would appear to be trivially
      impossible to defend against. If the PPA has access to every byte of
      every packet of a communication, then full application payload and
      content is available. Guidance to protocol designers to provide
      cryptographic protection of confidentiality in their protocols (e.g.,
      through the use of <xref target="RFC5246">TLS</xref> at the transport
      layer and <xref target="RFC3851">S/MIME</xref> end-to-end) improves this
      situation somewhat, but metadata such as source and destination IP
      addresses and ports are still available to allow correlation and
      association of communications. Protocols that route messages based on
      recipient identifier or pseudonym, such as <xref
      target="RFC2821">SMTP</xref> and <xref target="RFC6120">XMPP</xref>,
      still require intermediate systems to handle these. If each hop of the
      communication is not secured, or if the PPA is situated to observe
      messages at rest on one of the intermediate systems, these identifiers
      may be available to the PPA.</t>
      
      <t>Assuming that the PPA's resources are not unlimited allows us to back
      away from this worst-case scenario. Storing full packet information for a
      fully-loaded 10 Gigabit Ethernet link will fill one 4TB hard disk (the
      largest commodity hard disk available as of this writing) in less than an
      hour; storing network flow data from the same link, e.g. as <xref
      target="RFC5655">IPFIX Files</xref>, requires on the order of 1/1000 the
      storage (i.e., 4GB an hour). Flow-based surveillance approaches, which
      store only communications metadata, are therefore more scalable for
      pervasive surveillance, so it is worthwhile to analyze information which
      can be inferred from various network traffic capture and analysis
      techniques other than full packet capture.</t>

      <t>In the remainder of this analysis, we list kinds of information which
      can be directly observed and those which can be used for inference
      through e.g. fingerprinting. The former group may seem somewhat obvious,
      but are included for completeness.</t>
      
      <section title="Information subject to direct observation">

          <t>[EDITOR'S NOTE: list includes but not limited to communications
          content, application-layer identifiers, network- and transport-layer
          identifiers, association of DNS queries with subsequent usage of
          information in the answers.]</t>
          
      </section>
      
      <section title="Metainformation useful for inference">

          <t>[EDITOR'S NOTE: list includes but not limited to interpacket
          timing; packet sizes; flow packet and octet counts; presence of
          options which could lead to OS fingerprinting for deNATting, etc.]</t>

      </section>

  </section>
  
  <section title="Evaluating protocols for PPA resistance">
    
    <t>[EDITOR'S NOTE: How to look at a protocol and evaluate the observability
    of the information it transports?]</t>
    
  </section>
  
  <section title="Designing protocols for PPA resistance">

    <section title="Design for simplicity">
      
      <t>[EDITOR'S NOTE: This would seem to be common sense, but in practice it
      is not really the case that our protocol design processes naturally have
      simplicity as a goal. Simplicity of a design is directly related to the
      auditability of the design and implementations thereof. Privacy and
      security features designed into a protocol which are too complex to
      understand will suffer from limited implementation and deployment. A good
      example of such a case is IPsec where primary complaints are related to
      its complexity <xref target="Schneier03"/>.]</t>

    </section>

    <section title="Use transport-layer security everywhere">
      
      <t>[EDITOR'S NOTE: clean up the following: We've been moving in this
      direction for quite some time. The protocols are good but there are
      problems with the certificate authority system, stemming in large part
      from the tacit decision to include support for the CA business model in
      the design requirements, cf. design for simplicity. Current work in DANE
      is attempting to address this but this may end up trading one set of
      trust problems for another. Presuming each application layer hop has a
      good certificate for its peers, this is a good way to increase the cost
      for the PPA, by making application-layer data and metadata unobservable
      on the wire, and requiring eavesdropping on intermediate systems.]</t>

      <t>[ref: djb, DNScurve -- at the expense of performance of course]</t>
    </section>


    <section title="Use end-to-end security for messages">

      <t>[EDITOR'S NOTE: Use end-to-end security for protocols which use
      multiple hops at the application layer. SMTP is the big one here, and
      here we have a problem: S/MIME and PGP are concerned with protecting
      message payload, leaving headers (addresses, subjects, etc.) unprotected.
      Addresses need to be left in plaintext to route messages to their
      destination, so for electronic mail, anyway, there are design changes
      that need to be made.]</t>

    </section>

    <section title="Resist protocol fingerprinting">
      
      <t>[EDITOR'S NOTE: Fingerprinting can rely on packet and flow size
      information used by DPI engines to filter for particular information; the
      inclusion of null information in packets, or grouping information into
      more/fewer packets can reduce this risk at the expense of usable
      bandwidth; though this is implementation guidance, protocols should make
      it possible do to this. Similarly, fingerprinting can rely on
      inter-packet timing information: injecting delay into packet transmission
      can reduce this risk at the expense of latency. Point to make here: this
      will always make transmissions slower and bigger, since we've tended to
      optimize protocols for minimum bandwidth and minimum latency, the only
      way we can go is up.]</t>
    
    </section>

    <section title="Add indirection where possible">

    </section>

    <section title="Design for end-to-end open protocols">
      
    </section>

    <section title="Use plausible deniability where possible">
      
    </section>

    <section title="Use perfect forward secrecy">
      
    </section>

    <section title="Avoid designing for trust relationships">
      
    <t>[EDITOR'S NOTE: Trust relationships between coorporate entities with the
    rest of Internet users are prone to a their countries jurisdication. The
    compromise of various certificate authorities, for example, raise doubt whether
    their original purpose is actually deployed in a way they were designed to.
    As bad press will destroy the image and trust of such an authority, incentives
    seem obvious to hide breaches in secrecy. Moreover, it seems impossible to
    openly audit which authority is trustworthy and which isn't. MITM etc etc</t>
    </section>

    <section title="Design for decentralization"></section>

    <section title="Audit for hidden side-channels"></section>

    <section title="Open source implementation">

    <t>[EDITOR'S NOTE: This seems rather a implementation recommendation, but
        it's critical to open source implementations in order to have public
        audits and reviewability for the code. Closed source code may easily
        contain hidden backdoors, while open source code can be reviewed by
        many people publicly and avoids to have a central control from one
        company that could be put under pressure by an entity to include
        hidden backdoors or on-purpose vulnerabilities, while open sourced
        implementations can be easily forked, modified and would make such
        an inclusion harder to achieve.]</t>

    </section>

  </section>

  <section title="Acknowledgments">
    
    <t>Thanks to Dilip Many and Stephan Neuhaus, who contributed to an initial
       version of this work.</t>

  </section>
  
</middle>

<back>
  
    <references title="Normative References">
      <?rfc include="reference.RFC.6973" ?>
    </references>

    <references title="Informative References">
        <?rfc include="reference.RFC.2821" ?>
        <?rfc include="reference.RFC.3851" ?>
        <?rfc include="reference.RFC.5246" ?>
        <?rfc include="reference.RFC.5655" ?>
        <?rfc include="reference.RFC.6120" ?>
        <reference anchor="Ferguson03">
          <front>
            <title>A Cryptographic Evaluation of IPsec (https://www.schneier.com/paper-ipsec.pdf)</title>
            <author surname="Ferguson" initials="D."/>
            <author surname="Schneier" initials="B."/>
            <date month="December" year="2003"/>
        </reference>
    </references>

</back>
</rfc>
