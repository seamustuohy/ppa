<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc ipr="trust200902" category="info" docName="draft-trammell-perpass-ppa-01.txt">
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>

<front>
  <title abbrev="Pervasive Passive Adversary">
    A Threat Model for Pervasive Passive Surveillance
  </title>
  <author initials="B." surname="Trammell" fullname="Brian Trammell">
    <organization abbrev="ETH Zurich">
    Swiss Federal Institute of Technology Zurich
    </organization>
    <address>
      <postal>
        <street>Gloriastrasse 35</street>
        <city>8092 Zurich</city>
        <country>Switzerland</country>
      </postal>
      <phone>+41 44 632 70 13</phone>
      <email>trammell@tik.ee.ethz.ch</email>
    </address>
  </author>
  <author initials="D." surname="Borkmann" fullname="Daniel Borkmann">
    <organization abbrev="Red Hat">
    Red Hat
    </organization>
    <address>
      <postal>
        <street>Seefeldstrasse 69</street>
        <city>8008 Zurich</city>
        <country>Switzerland</country>
      </postal>
      <email>dborkman@redhat.com</email>
    </address>
  </author>

   <author fullname="Christian Huitema" initials="C." surname="Huitema">
      <organization>Microsoft Corporation</organization>
      <address>
        <postal>
          <street>One Microsoft Way</street>
          <city>Redmond</city>
          <code>98052-6399</code>
          <region>WA</region>
          <country>U.S.A.</country>
        </postal>
        <email>huitema@huitema.net</email>
      </address>
    </author>

  <date year="2013" month="November" day="15"/>
  <area>Security</area>
  <workgroup>perpass non-WG</workgroup>
  <abstract>

    <t>This document elaborates a threat model for pervasive surveillance. We
    assume an adversary with an interest in indiscriminate eavesdropping that
    can passively observe network traffic at every layer at every point in the
    network between the endpoints. It is intended to demonstrate to protocol
    designers and implementors the observability and inferability of
    information and metainformation transported over their respective
    protocols, to assist in the evaluation of the performance of these
    protocols and the effectiveness of their protection mechanisms under
    pervasive passive surveillance.</t>

  </abstract>
</front>

<middle>
  
  <section title="Open Issues">
      <t><list style="numbers">

          <t>Lots of things need citations that don't have them yet.</t>
          
          <t>Determine whether we want to include protocol design guidelines here,
          or refer to draft-cooper- and (possibly) other documents.</t>
          
      </list></t>
  </section>
  
  <section title="Introduction">
    
    <t>Surveillance is defined in <xref target="RFC6973"/>, Section 5.1.1, as
    "the observation or monitoring of an individual's communications or
    activities". Pervasive passive surveillance in the Internet is the practice 
    of surveillance at widespread observation points, without any particular target in mind at
    surveillance time of surveillance, and without any modification or injection of of network traccid. Pervasive
    passive surveillance allows subsequent analysis and inference to be applied
    to the collected data to achieve surveillance aims on a target to be
    identified later, or to analyze general communications patterns and/or
    behaviors without a specified target individual or group.</t>
    
    <t>This differentiates privacy in the face of pervasive surveillance from
    privacy as addressed in the literature, in that threats to privacy are
    generally (as in <xref target="RFC6973"/>) taken to have as a specific goal
    revealing the identity and/or associations of a specified individual;
    defeating pervasive surveillance of a large population is therefore more
    difficult than protecting the privacy of a single individual within a
    larger population.</t>
    
    <t>In this document, we take as given that communications systems should
    aim to provide privacy guarantees to their users, and that susceptibility
    to pervasive surveillance should avoided to the extent possible as a design
    goal in protocol design. From these assumptions we take the very act of
    pervasive surveillance to be adversarial by definition.</t>
    
    <t>This document outlines a threat model for an entity performing pervasive
    passive surveillance, termed the Pervasive Passive Adversary (PPA), and
    explores how to apply this model to the evaluation of protocols. As the
    primary threat posed by pervasive surveillance is a threat to the privacy
    of the parties to a given communication, this document is heavily based on
    <xref target="RFC6973"/>.</t>
    
  </section>
  
  <section title="Terminology">
      
      <t>[EDITOR'S NOTE: Check to see whether we actually use these]

      <t>The terms Anonymity, Anonymity Set, Anonymous, Attacker, Eavesdropper,
      Fingerprint, Fingerprinting, Identifier, Identity, Individual, Initiator,
      Intermediary, Observer, Pseudonym, Pseudonymity, Pseudonymous, Recipient,
      and Traffic Analysis are used in this document as defined by Section 3,
      Terminology, of <xref target="RFC6973"/>. In addition, this document
      defines the following terms:
      
      <list style="hanging"> 
          
          <t hangText="Observation: ">Information collected directly from
          communications by an eavesdropper or observer. For example, the
          knowledge that &lt;alice@example.com&gt; sent a message to
          &lt;bob@example.com&gt; via SMTP taken from the headers of an
          observed SMTP message would be an observation.</t>
          
          <t hangText="Inference: ">Information extracted from analysis of
          information collected directly from communications by an eavesdropper
          or observer. For example, the knowledge that a given web page was
          accessed by a given IP address, by comparing the size in octets of
          measured network flow records to fingerprints derived from known
          sizes of linked resources on the web servers involved would be an
          inference.</t>


      </list></t>

  </section>
  
  <section title="The Pervasive Passive Adversary">
    
      <t>The pervasive passive adversary (PPA) is an indiscriminate
      eavesdropper on a computer network that can:
        
      <list style="symbols">
        
        <t>observe every packet of all communications at any or every hop 
           in any network path between an initiator and a recipient; and can </t>
        
        <t>observe data at rest in intermediate systems between the 
           endpoints controlled by the initiator and recipient; but</t>

        <t>takes no other action with respect to these communications</t>
        
      </list>
      
      We note that a threat model that limits the adversary to being
      completely passive may under-represent the threat to communications
      privacy posed especially by well-resourced adversaries, but represents
      reasonably well the maximum capability of a single entity interested in 
      remaining undetectable.</t>

      <t>The techniques available to the PPA are direct observation and
      inference. Direct observation involves taking information directly from
      eavesdropped communications - e.g., URLs identifying content or email
      addresses identifying individuals from application-layer headers.
      Inference, on the other involves analyzing eavesdropped information to
      derive new information from it; e.g., searching for application or
      behavioral fingerprints in observed traffic to derive information about
      the observed individual from them, in absence of directly-observed
      sources of the same information.</t>

      <t>We would like to assume that the PPA does not have the ability to observe communications on trusted systems at either the initiator or a recipient of a communication, as there would seem to be little that a protocol designer could do in the case of compromised endpoints. However, given the state of vulnerability of many endpoints to various security exploits, we would encourage protocol designers to consider the protections their protocols afford to the privacy of their users even in the face of partially compromised endpoints.</t>

      <t>The PPA may additionally have have privileged information
      allowing the reversal of strong encryption -- e.g. compromised key material
      or knowledge of weaknesses in the design or implementation of
      cryptographic algorithms at the initiator, recipient, and/or
      intermediaries. However, we consider the evaluation and improvement of cryptographic
      protections, while important to improving the security of the Internet in the face of pervasive surveillance, to be out of scope for this work: here, we will assume that a given cryptographic protection for a protocol works as advertised.</t>

  </section>
  
  <section title="Threat analysis">
      
      <t>On initial examination, the PPA would appear to be trivially
      impossible to defend against. If the PPA has access to every byte of every packet of a communication, then full application payload and content is available.</t>

      <t><xref target="RFC3365">Guidance to protocol designers</xref> to provide cryptographic protection of confidentiality in their protocols improves this situation a great deal. The use of <xref target="RFC5246">TLS</xref> reduces the information available for correlation to the network and transport layer headers (e.g. source and destination IP addresses and ports) on each hop, but leaves any data at rest used by a protocol on intermediate systems vulnerable to intermediate system compromise.</t>

      <t>End-to-end approaches (e.g. <xref target="RFC3851">S/MIME</xref>) help defend against this threat. However, protocols that route messages based on
      recipient identifier or pseudonym, such as <xref
      target="RFC2821">SMTP</xref> and <xref target="RFC6120">XMPP</xref>,
      still require intermediate systems to handle these in the clear, and may leak additional metadata as well (e.g., in the S/MIME example, the SMTP headers), making this available to the PPA if it is has compromised these intermediate systems.</t>

      <t>We can assume that the PPA does not have unlimited resources,
      i.e., that it will attempt to eavesdrop at the most efficient observation
      point available to it, and will collect as little raw data as necessary
      to support its aims. This allows us to back
      away from this worst-case scenario. Storing full packet information for a
      fully-loaded 10 Gigabit Ethernet link will fill one 4TB hard disk (the
      largest commodity hard disk available as of this writing) in less than an
      hour; storing network flow data from the same link, e.g. as <xref
      target="RFC5655">IPFIX Files</xref>, requires on the order of 1/1000 the
      storage (i.e., 4GB an hour). Metadata-based surveillance approaches are therefore more scalable for
      pervasive surveillance, so it is worthwhile to analyze information which
      can be inferred from various network traffic capture and analysis
      techniques other than full packet observation.</t>

      <t>In the remainder of this analysis, we list kinds of information which
      can be directly observed; this may seem somewhat obvious,
      but are included for completeness. We then explore the types of information which may be useful for drawing inferences about user behavior, then go into practical detail on inference attacks against just information available in the IP header, to better illustrate the extent of the problem.</t>
      
      <section title="Information subject to direct observation">

        <t>Protocols which do not encrypt their payload make the entire content of the communication available to a PPA along their path. Following the advice in <xref target="RFC3365"/>, most such protocols have a secure variant which encrypts payload for confidentiality, and these secure variants are seeing ever-wider deployment. A noteworthy exception is <xref target="RFC1035">DNS</xref>, as <xref target="RFC4033">DNSSEC</xref> does not have confidentiality as a requirement. This implies that all DNS queries and answers generated by the activities of any protocol are available to a PPA.</t>

        <t>Protocols which encrypt their payload using an application- or transport-layer encryption scheme (e.g. <xref target="RFC5246">TLS</xref>) still expose all the information in their network and transport layer headers to a PPA, including source and destination addresses and ports. <xref target="RFC4303">IPsec ESP</xref> further encrypts the transport-layer headers, but still leaves IP address information unencrypted; in tunnel mode, these addresses correspond to the tunnel endpoints. Cryptographic protocols themselves, e.g. the TLS session identifier, may leak information that can be used for correlation and inference. While this information is much less semantically rich than the application payload, it can still be useful for the inferring an individual's activities.</t>

        <t>Protocols which imply the storage of some data at rest in intermediaries leave this data subject to observation at a PPA that has compromised these intermediaries, unless the data is encrypted end-to-end by the application layer protocol, or the implementation uses an encrypted store for this data.</t>
          
      </section>
      
      <section title="Information useful for inference">

          <t>Inference is information extracted from later analysis of an observed communication, and/or correlation of observed information with information available from other sources. Indeed, most useful inference performed by a PPA falls under the rubric of correlation. The simplest example of this is the observation of DNS queries and answers from and to a source and correlating those with IP addresses with which that source communicates can give access to information otherwise not available from encrypted application payloads (e.g., the Host: HTTP/1.1 request header when HTTP is used with TLS).</t>

          <t>Inference can also leverage information obtained from sources other than direct traffic observation. Geolocation databases, for example, have been developed for mundane applications including advertising. These can be used to map an IP address to a location [EDITOR'S NOTE: reference something relevant from geopriv], and that location information can be used to draw further inferences toward identifying or profiling an individual.</t>

          <t>Social media provide a rich source of more or less publicly accessible information. This information can be extremely semantically rich, including information about an individual's location, associations with other individuals and groups, and activities. Further, this information is generally contributed and curated by the individuals themselves [EDITOR'S NOTE: this really starts moving into the policy and education space, so we should find a way to constrain this point to the technical realities...]. Correlation of this social networking data with information available from direct observation of network traffic allows the creation of a much richer picture of an individual's activities than either alone. We note with some alarm that there is little that can be done from the protocol design side to limit such correlation by a PPA, and that the existence of such data sources in many cases greatly complicates the problem of protecting privacy by hardening protocols alone.</t>

      </section>

      <section title="On the Non-Anonymity of IP Addresses">

        <t>[EDITOR'S NOTE: frontmatter]</t>

      <section title="Analysis of IP headers"
               anchor="analIP">

      <t>[EDITOR'S NOTE: begin content from draft-huitema; need to do a pass to remove things that don't apply strictly to the PPA; run a check on the remainder to bring it in line
      with terminology]</t>

      <t>Internet traffic can be monitored by tapping Internet links, or by
      installing monitoring tools in Internet routers. Of course, a single link or
      a single router only provides access to a fraction of the global Internet
      traffic. However, monitoring a number of high capacity links or a
      set of routers placed at strategic locations provides access to a good
      sampling of Internet traffic.</t> 

      <t>Tools like IPFIX <xref target="RFC7011"/> allow administrators to acquire statistics about sequences
      of packets with some common properties that pass through a network device.
      The most common set of properties used in flow measurement is the "five-tuple" 
      of source and destination addresses, protocol type, 
      and source and destination ports. These
      statistics are commonly used for network engineering, but could certainly be
      used for other purposes.</t> 

      <t>Let's assume for a moment that IP addresses
      can be correlated to specific services or specific users. Analysis of the
      sequences of packets will quickly reveal which users use what services, and
      also which users engage in peer-to-peer connections with other users. Analysis
      of traffic variations over time can be used to detect increased activity by
      particular users, or in the case of peer-to-peer connections increased
      activity within groups of users. </t> 

      </section>

      <section title="Correlation of IP addresses to user identities">
      
      <t>In <xref target="analIP" />, we have assumed that IP addresses can be correlated 
      with specific user identities. This can be done in various ways.</t>

      <t>Tools like reverse DNS lookup can be used to retrieve 
      the DNS names of servers. Since the addresses of servers tend to be quite 
      stable and since servers are relatively less numerous than users, a PPA 
      could easily maintain its own copy of the DNS for well-known or popular 
      servers, to accelerate such lookups.</t>

      <t>On the other hand, the reverse lookup of IP addresses of users is
      generally less informative less informative. For example, a lookup of the
      address currently used by one author's home network returns a name of the form
      "c-192-000-002-033.hsd1.wa.comcast.net". This particular type of
      reverse DNS lookup generally reveals only course-grained location information.</t>

      <t>In many jurisdictions, Internet Service Providers (ISPs) are required to provide identification on a case by case basis of the "owner" of a specific IP address for law enforcement purposes. This is a reasonably expedient process for targeted
      investigations, but pervasive surveillance requires something more efficient.
      A PPA that could secure the cooperation of the ISP could correlate IP addresses
      and user identities automatically.</t>

      <t>Even if the ISP does not cooperate, identity can often be obtained via inference. 
      We will discuss in the next section how SMTP and HTTP 
      can leak information that links the IP address to the identity of the user. 
      </t>

      <section title="Monitoring messaging clients for IP address correlation">

        <t>POP3 <xref target="RFC1939" /> and IMAP <xref target="RFC3501" />
        are used to retrieve mail from mail servers, while a variant of SMTP <xref
        target="RFC5321" /> is used to submit messages through mail servers. IMAP
        connections originate from the client, and typically start with an
        authentication exchange in which the client proves its identity by answering a
        password challenge. </t>
        
        <t>If the protocol is executed in clear text, monitoring services can "tap"
        the links to the mail server, retrieve the user name provided by the client,
        and associate it with the IP address used to establish the connection.</t>

        <t>The same attack can be executed against the <xref target="RFC3261">SIP</xref>
        protocol, if the connection between the SIP UA and the SIP server operates in clear text</t>

        <t>In addition, there are many instant messaging services operating over the
        Internet using proprietary protocols. If any of these proprietary
        protocols includes clear-text transmission of the user identity, these can be
        observed to provide an association between the user identity and the IP
        address.</t>

      </section>

      <section title="Retrieving IP addresses from mail headers">

        <t><xref target="RFC5321">SMTP</xref> requires that each successive SMTP relay adds a "Received" header to the mail headers. The purpose of these headers is to enable audit of mail transmission, and perhaps to distinguish between regular mail and spam. Here is an extract from the headers of a message recently received from the "perpass" mailing list:</t>

<figure>
<artwork align="left"><![CDATA[
   Received: from 192.000.002.044.zone13.example.org (HELO ?192.168.1.100?)
  (xxx.xxx.xxx.xxx)
  by lvpsyyy-yyy-yyy-yyy.example.net with ESMTPSA
  (DHE-RSA-AES256-SHA encrypted, authenticated);
  27 Oct 2013 21:47:14 +0100
   Message-ID: <526D7BD2.7070908@example.org>
   Date: Sun, 27 Oct 2013 20:47:14 +0000
   From: Some One <some.one@example.org>
]]></artwork>
</figure>

          <t>This is the first "Received" header attached to the message by
          the first SMTP relay.  For privacy reasons, the field values have been
          anonymized. We learn here that the message was submitted by "Some One" on
          October 27, from a host behind a <xref target="RFC1918">NAT (192.168.1.100)</xref> that used the IP address 192.0.2.44. The information remained in the message, and is accessible
          by all recipients of the "perpass" mailing list, or indeed by any PPA that sees at least one copy of the message. </t>

          <t>A PPA that can observe sufficient email traffic can regularly update the mapping between public IP addresses and individual email identities. Even if the SMTP traffic was encrypted on submission and relaying, the PPA can still receive a copy of public mailing
          lists like "perpass". </t>

          <t>
          Similar information is available in the SIP headers <xref target="RFC3261" />.
          </t>

        </section>

        <section title="Tracking address use with web cookies">

          <t>Many web sites only encrypt a small fraction of their transactions. A
          popular pattern was to use HTTPS for the login information, and then use a
          "cookie" to associate following clear-text transactions with the user's
          identity. Cookies are also used by various advertisement services to quickly
          identify the users and serve them with "personalized" advertisements. Such
          cookies are particularly useful if the advertisement services want to keep
          tracking the user across multiple sessions that may use different IP
          addresses.</t>

          <t>As cookies are sent in clear text, a PPA can build a database that
          associates cookies to IP addresses for non-HTTPS traffic. If the IP address is
          already identified, the cookie  can be linked to the user identify. After
          that, if the same cookie appears on a  new IP address, the new IP address can
          be immediately associated with the pre-determined identity. </t>

        </section>

        <section title="Tracking address use with network graphs">

          <t> There have been many publicly reported instances in which the police
          managed to find the owner of a "disposable" cell phone. In theory this is
          hard, because there is no direct registration of the owner's identity. But in
          practice, the identity can be  inferred through analysis of network graphs.
          </t>
          
          <t> Suppose that the new owner of the cell phone uses it carelessly to call
          his mother,  his brother, his boss and his preferred restaurant. Mother,
          brother, boss and restaurant  are part of the "network graph" already
          collected by pervasive monitoring, and in fact  constitute an almost unique
          signature of this particular individual. A quick database search and voila,
          the cell phone is identified. </t>
          
          <t>The same approach can be applied to IP addresses. Users do a lot of repeat
          visits to web sites, mail servers, game servers, instant messaging servers,
          etc. These visits tend to follow time patterns. It is easy to imagine that if
          a particular pattern was  seen from address "A" one day, and the same pattern
          from address "B" the next day, then A and B point to the same user, whose
          computer just got a new address. At that point, the user may be identified
          only as a "case number," but the real identity can be filled as soon as email
          monitoring is successful, or SIP monitoring, or maybe some ISP cooperation.
          </t>

        </section>

    </section>

  </section>
  
  <section title="Evaluating protocols for PPA resistance">
    
    <t>[EDITOR'S NOTE: How to look at a protocol and evaluate the observability
    of the information it transports? Probably refer to draft-cooper-]</t>
    
  </section>
  
  <section title="Designing protocols for PPA resistance">

    <t>[EDITOR'S NOTE: Much of the following came from a blog post on trammell.ch, and needs to be made more lucid before publication. Not clear how much of this really belongs in a threat model document.]</t>

    <section title="Design for simplicity">
      
      <t>[EDITOR'S NOTE: This would seem to be common sense, but in practice it
      is not really the case that our protocol design processes naturally have
      simplicity as a goal. Simplicity of a design is directly related to the
      auditability of the design and implementations thereof. Privacy and
      security features designed into a protocol which are too complex to
      understand will suffer from limited implementation and deployment. A good
      example of such a case is IPsec where primary complaints are related to
      its complexity <xref target="Schneier03"/>.]</t>

    </section>

    <section title="Use transport-layer security everywhere">
      
      <t>[EDITOR'S NOTE: clean up the following: We've been moving in this
      direction for quite some time. The protocols are good but there are
      problems with the certificate authority system, stemming in large part
      from the tacit decision to include support for the CA business model in
      the design requirements, cf. design for simplicity. Current work in DANE
      is attempting to address this but this may end up trading one set of
      trust problems for another. Presuming each application layer hop has a
      good certificate for its peers, this is a good way to increase the cost
      for the PPA, by making application-layer data and metadata unobservable
      on the wire, and requiring eavesdropping on intermediate systems.]</t>

      <t>[ref: djb, DNScurve -- at the expense of performance of course]</t>
    </section>


    <section title="Use end-to-end security for messages">

      <t>[EDITOR'S NOTE: Use end-to-end security for protocols which use
      multiple hops at the application layer. SMTP is the big one here, and
      here we have a problem: S/MIME and PGP are concerned with protecting
      message payload, leaving headers (addresses, subjects, etc.) unprotected.
      Addresses need to be left in plaintext to route messages to their
      destination, so for electronic mail, anyway, there are design changes
      that need to be made.]</t>

    </section>

    <section title="Resist protocol fingerprinting">
      
      <t>[EDITOR'S NOTE: Fingerprinting can rely on packet and flow size
      information used by DPI engines to filter for particular information; the
      inclusion of null information in packets, or grouping information into
      more/fewer packets can reduce this risk at the expense of usable
      bandwidth; though this is implementation guidance, protocols should make
      it possible do to this. Similarly, fingerprinting can rely on
      inter-packet timing information: injecting delay into packet transmission
      can reduce this risk at the expense of latency. Point to make here: this
      will always make transmissions slower and bigger, since we've tended to
      optimize protocols for minimum bandwidth and minimum latency, the only
      way we can go is up.]</t>
    
    </section>

    <section title="Add indirection where possible">

    </section>

    <section title="Design for end-to-end open protocols">
      
    </section>

    <section title="Use plausible deniability where possible">
      
    </section>

    <section title="Use perfect forward secrecy">
      
    </section>

    <section title="Avoid designing for trust relationships">
      
    <t>[EDITOR'S NOTE: Trust relationships between coorporate entities with the
    rest of Internet users are prone to a their countries jurisdication. The
    compromise of various certificate authorities, for example, raise doubt whether
    their original purpose is actually deployed in a way they were designed to.
    As bad press will destroy the image and trust of such an authority, incentives
    seem obvious to hide breaches in secrecy. Moreover, it seems impossible to
    openly audit which authority is trustworthy and which isn't. MITM etc etc</t>
    </section>

    <section title="Design for decentralization"></section>

    <section title="Audit for hidden side-channels"></section>

    <section title="Open source implementation">

    <t>[EDITOR'S NOTE: This seems rather a implementation recommendation, but
        it's critical to open source implementations in order to have public
        audits and reviewability for the code. Closed source code may easily
        contain hidden backdoors, while open source code can be reviewed by
        many people publicly and avoids to have a central control from one
        company that could be put under pressure by an entity to include
        hidden backdoors or on-purpose vulnerabilities, while open sourced
        implementations can be easily forked, modified and would make such
        an inclusion harder to achieve.]</t>

    </section>

  </section>

  <section title="IANA Considerations">

    <t>This document has no actions for IANA</t>

  </section>

  <section title="Security Considerations">

    <t>This document explores the capabilities of an adversary with an interest in undermining the security of the Internet to enable pervasive surveillance activities. It does not provide any specific protocol guidance that may impact the security of those protocols, but it is hoped that the awareness of this threat will end up being a metacontribution to the Internet's security.</t>

  </section>


  <section title="Acknowledgments">
    
    <t>Thanks to Dilip Many and Stephan Neuhaus, who contributed to an initial
       version of this work. Thanks to Mark Townsley for pointing out the relevance of the state of endpoint vulnerabilities to the abilities of the PPA, and to Stephen Farrell for the encouragement and help with scoping the document.</t>

  </section>
  
</middle>

<back>
  
    <references title="Normative References">
      <?rfc include="reference.RFC.6973" ?>
    </references>

    <references title="Informative References">
        <?rfc include="reference.RFC.2821" ?>
        <?rfc include="reference.RFC.3365" ?>
        <?rfc include="reference.RFC.3851" ?>
        <?rfc include="reference.RFC.5246" ?>
        <?rfc include="reference.RFC.5655" ?>
        <?rfc include="reference.RFC.6120" ?>
        <reference anchor="Ferguson03">
          <front>
            <title>A Cryptographic Evaluation of IPsec (https://www.schneier.com/paper-ipsec.pdf)</title>
            <author surname="Ferguson" initials="D."/>
            <author surname="Schneier" initials="B."/>
            <date month="December" year="2003"/>
        </reference>
    </references>

</back>
</rfc>
